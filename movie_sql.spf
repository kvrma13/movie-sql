<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<dict>
		<key>connection</key>
		<dict>
			<key>database</key>
			<string>movies</string>
			<key>host</key>
			<string>localhost</string>
			<key>name</key>
			<string>localhost</string>
			<key>rdbms_type</key>
			<string>mysql</string>
			<key>sslCACertFileLocation</key>
			<string></string>
			<key>sslCACertFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslCertificateFileLocation</key>
			<string></string>
			<key>sslCertificateFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslKeyFileLocation</key>
			<string></string>
			<key>sslKeyFileLocationEnabled</key>
			<integer>0</integer>
			<key>type</key>
			<string>SPSocketConnection</string>
			<key>useSSL</key>
			<integer>0</integer>
			<key>user</key>
			<string>root</string>
		</dict>
		<key>session</key>
		<dict>
			<key>connectionEncoding</key>
			<string>utf8</string>
			<key>contentPageNumber</key>
			<integer>1</integer>
			<key>contentSelection</key>
			<data>
			YnBsaXN0MDDUAQIDBAUGNjdYJHZlcnNpb25YJG9iamVjdHNZJGFy
			Y2hpdmVyVCR0b3ASAAGGoK0HCBUWFxgZHSQoLDA0VSRudWxs0wkK
			CwwQFFdOUy5rZXlzWk5TLm9iamVjdHNWJGNsYXNzow0OD4ACgAOA
			BKMREhOABYAGgAiADFR0eXBlVHJvd3NUa2V5c18QJlNlbGVjdGlv
			bkRldGFpbFR5cGVQcmltYXJ5S2V5ZWREZXRhaWxz0wkKCxobHKCg
			gAfSHh8gIVokY2xhc3NuYW1lWCRjbGFzc2VzXxATTlNNdXRhYmxl
			RGljdGlvbmFyeaMgIiNcTlNEaWN0aW9uYXJ5WE5TT2JqZWN00goL
			JSehJoAJgAvSCykqK1lOUy5zdHJpbmeAClJpZNIeHy0uXxAPTlNN
			dXRhYmxlU3RyaW5noy0vI1hOU1N0cmluZ9IeHzEyXk5TTXV0YWJs
			ZUFycmF5ozEzI1dOU0FycmF50h4fIjWiIiNfEA9OU0tleWVkQXJj
			aGl2ZXLRODlUZGF0YYABAAgAEQAaACMALQAyADcARQBLAFIAWgBl
			AGwAcAByAHQAdgB6AHwAfgCAAIIAhwCMAJEAugDBAMIAwwDFAMoA
			1QDeAPQA+AEFAQ4BEwEVARcBGQEeASgBKgEtATIBRAFIAVEBVgFl
			AWkBcQF2AXkBiwGOAZMAAAAAAAACAQAAAAAAAAA6AAAAAAAAAAAA
			AAAAAAABlQ==
			</data>
			<key>contentSortColIsAsc</key>
			<true/>
			<key>contentViewport</key>
			<string>{{0, 0}, {1226, 760}}</string>
			<key>isToolbarVisible</key>
			<true/>
			<key>queries</key>
			<string>-- Select all columns and rows from the movies table
SELECT movies.id, movies.title, movies.genres
FROM movies ;

-- Select only the title and id of the first 10 rows

SELECT movies.id, movies.title
FROM movies
LIMIT 10 ;

-- Find the movie with the id of 485

SELECT movies.id, movies.title, movies.genres
FROM movies 
WHERE movies.id = 485 ;

-- Find the id (only that column) of the movie Made in America (1993)

SELECT movies.id
FROM movies
WHERE movies.title = 'Made in America (1993)';

-- Find the first 10 sorted alphabetically

SELECT movies.id, movies.title, movies.genres
FROM movies
ORDER BY movies.title
LIMIT 10 ;

-- Find all movies from 2002

SELECT movies.id, movies.title, movies.genres
FROM movies
WHERE  movies.title LIKE  '%(2002)%';
-- Find out what year the Godfather came out

SELECT movies.id, movies.title, movies.genres
FROM movies
WHERE movies.title LIKE 'Godfather%' ;

-- Without using joins find all the comedies

SELECT movies.id, movies.title, movies.genres
FROM movies
WHERE movies.genres LIKE '%Comedy%' ;

-- Find all comedies in the year 2000

SELECT movies.id, movies.title, movies.genres
FROM movies
WHERE movies.genres LIKE '%Comedy%' AND movies.title LIKE '%(2000)%';

-- Find any movies that are about death and are a comedy

SELECT movies.id, movies.title, movies.genres
FROM movies
WHERE movies.genres LIKE '%Comedy%' AND movies.title LIKE '%dead%';

-- Find any movies from either 2001 or 2002 with a title containing super

SELECT movies.id, movies.title, movies.genres
FROM movies
HAVING movies.title LIKE '%super%' AND (movies.title LIKE '%(2002)%' OR movies.title LIKE '%(2001)%');

-- Create a new table called actors (We are going to pretend the actor can only play in one movie). The table should include name, character name, foreign key to movies and date of birth at least plus an id field.

-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements

INSERT INTO actors(`name`, `charname`, `moviekey`, `dob`) 
VALUES 
('Jon Stamos', 'Jimmy Cruz', '1', '04/20/1974'),
('Dogo', 'Jenkins', '1', '09/15/1985'),
('terrence Smith', 'Joe Louise', '1', '12/25/1990'),
('Michael Scott', 'Scott Pilligram', '1', '09/04/1964'),
('Will Smith', 'Johnny Cash', '2', '07/10/1964'),
('Mark Anthony', 'Chewbaca', '2', '12/14/1967'),
('Kyle Massy', 'Ronald McDonald', '2', '01/20/1974'),
('Holly Jill', 'Zack Branigan', '3', '04/22/1966'),
('Brandon Murburry', 'George Neal', '3', '07/14/1965'),
('Jane Jonson', 'Candy Rain', '3', '01/21/1994');

-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating

UPDATE movies
SET `MPAA_rating` = 'PG'
WHERE movies.title LIKE '%Jumanji%';

UPDATE movies
SET `MPAA_rating` = 'G'
WHERE movies.title LIKE '%toy story%';

UPDATE movies
SET `MPAA_rating` = 'PG'
WHERE movies.title LIKE '%Ace Ventura%';

UPDATE movies
SET `MPAA_rating` = 'PG'
WHERE movies.title LIKE '%lion king%';

UPDATE movies
SET `MPAA_rating` = 'PG'
WHERE movies.title LIKE '%free willy%';
-- Find all the ratings for the movie Godfather, show just the title and the rating
SELECT movies.title, ratings.rating
FROM movies
LEFT JOIN ratings ON ratings.movie_id = movies.id
WHERE movies.title LIKE "Godfather%" ;
-- Order the previous objective by newest to oldest
SELECT movies.title, ratings.rating, ratings.timestamp
FROM movies
LEFT JOIN ratings ON ratings.movie_id = movies.id
WHERE movies.title LIKE "godfather%" 
ORDER BY ratings.timestamp;
-- Find the comedies from 2005 and get the title and imdbid from the links table
SELECT movies.title, movies.genres, links.imdb_id
FROM movies
LEFT JOIN links ON links.movie_id = movies.id
WHERE movies.title LIKE "%(2005)%" AND movies.genres LIKE 'COMEDY';
-- Find all movies that have no ratings
SELECT movies.title, movies.genres, ratings.rating
FROM movies
LEFT JOIN ratings ON ratings.movie_id = movies.id
WHERE ratings.rating is NULL OR ratings.rating = '' ; 
-- Complete the following aggregation objectives:
-- Get the average rating for a movie
SELECT avg(ratings.rating), movies.id
FROM movies
LEFT JOIN ratings ON ratings.movie_id = movies.id
WHERE movies.title LIKE 'Mortal Kombat (1995)'
GROUP BY movies.id ;
-- Get the total ratings for a movie
SELECT sum(ratings.rating), movies.id
FROM movies
LEFT JOIN ratings ON ratings.movie_id = movies.id
WHERE movies.title LIKE 'Mortal Kombat (1995)'
GROUP BY movies.id ;-- Get the total movies for a genre

SELECT count(movies.genres)
FROM movies
WHERE movies.genres LIKE '%comedy%' ;
-- Get the average rating for a user
SELECT avg(ratings.rating), ratings.user_id
FROM ratings
WHERE ratings.user_id = 1 ;
-- Find the user with the most ratings
SELECT ratings.user_id, count(ratings.rating) a
FROM ratings 
GROUP BY ratings.user_id
ORDER BY a DESC
LIMIT 1 ;
-- Find the user with the highest average rating

SELECT avg(ratings.rating) b, ratings.user_id
FROM ratings
GROUP BY ratings.user_id
ORDER BY b DESC
LIMIT 1;
-- Find the user with the highest average rating with more than 50 reviews

SELECT avg(ratings.rating) b, ratings.user_id
FROM ratings
GROUP BY ratings.user_id
HAVING COUNT(ratings.user_id) &amp;gt; 50
ORDER BY b DESC
LIMIT 1;




</string>
			<key>table</key>
			<string>actors</string>
			<key>view</key>
			<string>SP_VIEW_CUSTOMQUERY</string>
			<key>windowVerticalDividerPosition</key>
			<real>214</real>
		</dict>
	</dict>
	<key>encrypted</key>
	<false/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string>-- Select all columns and rows from the movies table
SELECT id, title, genre 
FROM `movies`</string>
		<string>-- Select all columns and rows from the movies table
SELECT id, title, genre 
FROM `movies`
-- Select only the title and id of the first 10 rows

-- Find the movie with the id of 485
-- Find the id (only that column) of the movie Made in America (1993)
-- Find the first 10 sorted alphabetically
-- Find all movies from 2002
-- Find out what year the Godfather came out
-- Without using joins find all the comedies
-- Find all comedies in the year 2000
-- Find any movies that are about death and are a comedy
-- Find any movies from either 2001 or 2002 with a title containing super
-- Create a new table called actors (We are going to pretend the actor can only play in one movie). The table should include name, character name, foreign key to movies and date of birth at least plus an id field.
-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements
-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating</string>
		<string>-- Select all columns and rows from the movies table
SELECT id, title, genre 
FROM `movies`
-- Select only the title and id of the first 10 rows
SELECT 
-- Find the movie with the id of 485
-- Find the id (only that column) of the movie Made in America (1993)
-- Find the first 10 sorted alphabetically
-- Find all movies from 2002
-- Find out what year the Godfather came out
-- Without using joins find all the comedies
-- Find all comedies in the year 2000
-- Find any movies that are about death and are a comedy
-- Find any movies from either 2001 or 2002 with a title containing super
-- Create a new table called actors (We are going to pretend the actor can only play in one movie). The table should include name, character name, foreign key to movies and date of birth at least plus an id field.
-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements
-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>5.7.21</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
